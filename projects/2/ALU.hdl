/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
 
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    
    //Operations on x.
    Mux16(a=x,b[0..15]=false,sel=zx,out=zxOut);
    Not16(in=zxOut,out=zxOutNot);
    Mux16(a=zxOut,b=zxOutNot,sel=nx,out=finalX);

    //Operations on y.
    Mux16(a=y,b[0..15]=false,sel=zy,out=zyOut);
    Not16(in=zyOut,out=zyOutNot);
    Mux16(a=zyOut,b=zyOutNot,sel=ny,out=finalY);

    //Operation between final x and y.
    Add16(a=finalX,b=finalY,out=AddResult);
    And16(a=finalX,b=finalY,out=AndResult);
    Mux16(a=AndResult,b=AddResult,sel=f,out=xOPy);

    //Processing before final output bus.
    Not16(in=xOPy,out=xOPyNot);
    Mux16(a=xOPy,b=xOPyNot,sel=no,out[15]=outMSB,out[0..7]=rightHalfOut,out[8..15]=leftHalfOut,out=out);

    //Processing status bits.
    Or8Way(in=rightHalfOut,out=orRight);
    Or8Way(in=leftHalfOut,out=orLeft);
    Or(a=orRight,b=orLeft,out=orFinal);
    Not(in=orFinal, out=zr);
    And(a=outMSB, b=true, out=ng); 

}