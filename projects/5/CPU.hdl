// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    And(
        a=instruction[15],
        b=instruction[4],
        out=DLoad
    );  
    
    DRegister(
        in=ALUout,
        load=DLoad,
        out=Dregout
    );

    And(
        a=instruction[15],
        b=instruction[3],
        out=writeM
    );

    Mux16(
        a=Aregout,
        b=inM,
        sel=instruction[12],
        out=Bmuxout
    );

    And(
        a=instruction[5],
        b=instruction[15],
        out=desthasA
    );

    Nand(
        a=instruction[15],
        b=true,
        out=isAinstruction
    );

    Or(
        a=desthasA,
        b=isAinstruction,
        out=loadA
    );

    ARegister(
        in=Amuxout,
        load=loadA,
        out[0..14]=addressM,
        out=Aregout
    );

    Mux16(
        a=instruction,
        b=ALUout,
        sel=instruction[15],
        out=Amuxout
    );
    
    ALU(
        x=Dregout,
        y=Bmuxout,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=ALUout,
        zr=zrOut,
        ng=ngOut
    );

    Not(
        in=ngOut,
        out=notngOut
    );

    /*
    JMP
    JNE
    */

    And(
        a=instruction[1],
        b=zrOut,
        out=JEQ
    );
    
    And(
        a=instruction[2],
        b=ngOut,
        out=JLT
    );

    And(
        a=instruction[0],
        b=notngOut,
        out=JGT
    );

    Or(
        a=JEQ,
        b=JLT,
        out=JLE
    );

    Or(
        a=JEQ,
        b=JGT,
        out=JGE
    );

    Or(
        a=JGT,
        b=JLT,
        out=JNE
    );

    And(
        a=instruction[0],
        b=instruction[1],
        out=jmphalf
    );

    And(
        a=instruction[2],
        b=jmphalf,
        out=JMP
    );

    Or8Way(
        in[0]=JEQ,
        in[1]=JLT,
        in[2]=JGT,
        in[3]=JLE,
        in[4]=JGE,
        in[5]=JNE,
        in[6]=JMP,
        in[7]=false,
        out=loadPC
    );

    Not(
        in=loadPC,
        out=incPC
    );

    PC(
        in=Aregout,
        inc=incPC,
        load=loadPC,
        reset=reset,
        out[0..14]=pc
    );

}